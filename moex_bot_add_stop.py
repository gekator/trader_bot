import asyncio
import logging
from datetime import datetime, timedelta, time
from typing import List, Optional
import torch
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import Command
from aiogram.types import Message
from aiohttp import ClientSession
import aiohttp
import aiomoex
import talib
import pandas as pd
import numpy as np
import os.path

from backtest.Trader.Trader import Trader
from backtest.TraderRLModels import ActorCriticConv1D, GetStateIndCombConv1D
from backtest.TraderUtil import readSettings, ScaleValues, RLSettings
from backtest.createDirectory import makeFolderName, makeDir
from config import TOKEN as BOT_TOKEN, ADMIN_ID, CHANNEL_ID

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞–Ω–Ω—ã—Ö (1 –∏–ª–∏ 10 –º–∏–Ω—É—Ç)
INTERVAL = 10

if INTERVAL == 10:
    RESAMPLE_NUM = 30
    RESAMPLE_INT = f"{RESAMPLE_NUM}T"
    CANDLES_NUM = 14 * 12 + 3 * 3
elif INTERVAL == 1:
    RESAMPLE_NUM = 5
    RESAMPLE_INT = f"{RESAMPLE_NUM}T"
    CANDLES_NUM = 14 * 5 + 3 * 3


class MM:
    MAX = 0
    MIN = 0


class Feauteres:
    names = 0
    minmax = 0


def getFeautersDataFromFile(pathToFile, feauter):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∏–Ω/–º–∞–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ CSV-—Ñ–∞–π–ª–∞."""
    df = pd.read_csv(pathToFile).set_index("NameOfParam")
    returns_MAX = df.loc["returns_MAX", "Values"]
    returns_MIN = df.loc["returns_MIN", "Values"]
    RSI_5_MAX = df.loc["RSI_5_MAX", "Values"]
    RSI_5_MIN = df.loc["RSI_5_MIN", "Values"]
    AD5_returns_MAX = df.loc["AD5_returns_MAX", "Values"]
    AD5_returns_MIN = df.loc["AD5_returns_MIN", "Values"]

    OneVals = MM()
    OneVals.MAX, OneVals.MIN = returns_MAX, returns_MIN
    SecondVals = MM()
    SecondVals.MAX, SecondVals.MIN = RSI_5_MAX, RSI_5_MIN
    ThreeVals = MM()
    ThreeVals.MAX, ThreeVals.MIN = AD5_returns_MAX, AD5_returns_MIN

    feauteresData = Feauteres()
    feauteresData.names = feauter
    feauteresData.minmax = [OneVals, SecondVals, ThreeVals]
    return feauteresData


def logData(file, string):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –ª–æ–≥-—Ñ–∞–π–ª."""
    with open(file, "a") as myfile:
        myfile.write(string)


def calculate_rsi(data, rsi_period):
    """–í—ã—á–∏—Å–ª—è–µ—Ç RSI –∏ —Å–¥–≤–∏–≥–∞–µ—Ç –µ–≥–æ –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è lookahead bias."""
    dataset = data.copy()
    delta = dataset['Close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=rsi_period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=rsi_period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    dataset['rsi_df'] = rsi.shift(1)
    return dataset


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ ---
pathToFile = "/backtest/TraderExamples/Settings/SettingsGAZPTrain_7-10-2024_13-2-2025_01092025.csv"
(
    TICKER, nameOfTicker, timeDelta, folderName, rewardType, nameOfDates,
    nameOfTestDates, dateName, lots, startCash, comisBroker, comisMoex,
    del_r, Gamma, Clc, lr, gran, will, rewardMult, willBeGap_using,
    willBeGap_value, passLoopForward, dontMakeCurrentDeals
) = readSettings(pathToFile)

PERIOD = f'/{timeDelta}m/'
comis = (comisBroker, comisMoex)
folderName = makeFolderName(folderName, comis[0], Gamma, Clc, lr, del_r, gran, will)

nameOfModel = "GAZP_ActorCriticConv1D_Tr_Rw=410748_Test_Rw=139382_returns_RSI5_sc_AD5_returns_sc__ep=490"
PATHFORMODELS = f"/backtest/TrainedModels/{TICKER}{PERIOD}{folderName}"
PATHFORMODELSPTH = f"{PATHFORMODELS}pth/{nameOfModel}.pth"
PATHFORPDF = f"{PATHFORMODELS}test/{nameOfModel}"
PATHFORJITMODELS = f"{PATHFORMODELS}l/{nameOfModel}_jit.pt"
pathForData = f"{PATHFORMODELS}data/"
pathForCurrentTestFolder = f"{PATHFORMODELS}test/{nameOfModel.split('=')[-1]}/"

fileLogName = "Log.txt"
if os.path.exists(pathForCurrentTestFolder + fileLogName):
    fileLogName = "Log2.txt"

nameOfPreparedDataFile = f"{nameOfTicker}{nameOfDates}.csv"
nameOfTestDataFile = f"{nameOfTicker}{nameOfTestDates}_Test.csv"
nameOfMinMaxDataFile = f"{nameOfDates}_MINMAX.csv"

settings = RLSettings(
    pathForCurrentTestFolder, lots, lots, startCash, comis, rewardType,
    del_r, gran, will, timeDelta, rewardMult, Gamma, Clc, lr,
    willBeGap_using, willBeGap_value, passLoopForward, dontMakeCurrentDeals
)

# --- –ü—Ä–∏–∑–Ω–∞–∫–∏ –∏ –∏—Ö –º–∏–Ω/–º–∞–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è ---
feauteres = ['returns', 'RSI5_sc', 'AD5_returns_sc']
feauteresForTest = ['Close', 'RSI5', 'AD5']
feautersData = getFeautersDataFromFile(pathForData + nameOfMinMaxDataFile, feauteresForTest)
settings.feautData = feautersData
numOfFeauteres = len(feauteres)
action_numbers = 3

# --- Telegram ---
CHAT_ID = None
router = Router()


def wait_until_next_interval(interval_minutes: int = 5):
    """–û–∂–∏–¥–∞–µ—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –∫—Ä–∞—Ç–Ω–æ–≥–æ interval_minutes."""
    now = datetime.now()
    minutes_since_hour = now.minute
    remainder = minutes_since_hour % interval_minutes
    next_minute = (minutes_since_hour - remainder) + interval_minutes

    if next_minute >= 60:
        next_time = (now + timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)
    else:
        next_time = now.replace(minute=next_minute, second=0, microsecond=0)

    wait_seconds = (next_time - now).total_seconds()
    return asyncio.sleep(wait_seconds)


class Strategy:
    def __init__(self, settings: RLSettings, session: Optional[ClientSession], bot: Bot, chat_id: int):
        self.session = session
        self.settings = settings
        self.backtest = Trader.load_state(money=settings.startCash, comis=settings.comis, printBool=True)
        self.bot = bot
        self.chat_id = chat_id
        self.is_running = False
        self.stop_event = asyncio.Event()
        self.task = None
        self.report_task = None

    async def step(self, Signal: int, prices: float):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram."""
        current_price_str = f"{prices:.2f}".replace('.', ',')
        ticker_name = "–ü–ê–û \"–ì–∞–∑–ø—Ä–æ–º\""
        current_profit = self.backtest.getCurrentProfit(prices)
        profit_percent = 0
        if self.backtest.posVolume != 0:
            profit_percent = (current_profit / abs(self.backtest.moneyOnStartDeal)) * 100 if self.backtest.moneyOnStartDeal != 0 else 0

        endOfDataframe = False  # –ó–∞–≥–ª—É—à–∫–∞; –≤ live-—Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ False

        if Signal == 2 and self.backtest.state == "zero":
            self.backtest.price_of_pos = prices
            self.backtest.buy(self.settings.lot, prices)
            assert self.backtest.state == "Long"
            mess = f"‚¨ÜÔ∏èüü¢ –ü–æ–∫—É–ø–∫–∞ –∞–∫—Ü–∏–π {ticker_name} –ø–æ —Ü–µ–Ω–µ {current_price_str} ‚ÇΩ."
            await self._broadcast_message(mess)

        elif Signal == 0 and self.backtest.state == "zero":
            self.backtest.price_of_pos = prices
            self.backtest.sell(self.settings.lot, prices)
            assert self.backtest.state == "Short"
            mess = f"‚¨áÔ∏èüî¥ –ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ü–∏–π {ticker_name} –ø–æ —Ü–µ–Ω–µ {current_price_str} ‚ÇΩ."
            await self._broadcast_message(mess)

        elif (
            (Signal == 1 and self.backtest.state in ["zero", "Long", "Short"]) or
            (Signal == 2 and self.backtest.state == "Long") or
            (Signal == 0 and self.backtest.state == "Short")
        ):
            mess = f"üü° –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø–æ–∑–∏—Ü–∏—è {self.backtest.state}. –¶–µ–Ω–∞ {current_price_str} ‚ÇΩ."
            await self._broadcast_message(mess)

        elif self.backtest.state == "Long" and Signal == 0:
            profit_abs = current_profit
            profit_percent = (profit_abs / self.backtest.moneyOnStartDeal) * 100 if self.backtest.moneyOnStartDeal != 0 else 0
            mess = (
                f"‚¨áÔ∏è –ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ü–∏–π {ticker_name} –ø–æ —Ü–µ–Ω–µ {current_price_str} ‚ÇΩ. "
                f"–ü—Ä–æ—Ñ–∏—Ç –æ—Ç —Å–¥–µ–ª–∫–∏ {profit_abs:.1f} ‚ÇΩ. –ü—Ä–∏–±—ã–ª—å —Å–¥–µ–ª–∫–∏ {profit_percent:.1f}%."
            )
            self.backtest.price_of_pos = 0
            self.backtest.sell(self.settings.lot, prices)
            await self._broadcast_message(mess)

        elif self.backtest.state == "Short" and Signal == 2:
            profit_abs = current_profit
            profit_percent = (profit_abs / self.backtest.start_money) * 100 if self.backtest.start_money != 0 else 0
            mess = (
                f"‚¨ÜÔ∏è –ü–æ–∫—É–ø–∫–∞ –∞–∫—Ü–∏–π {ticker_name} –ø–æ —Ü–µ–Ω–µ {current_price_str} ‚ÇΩ. "
                f"–ü—Ä–æ—Ñ–∏—Ç –æ—Ç —Å–¥–µ–ª–∫–∏ {profit_abs:.1f} ‚ÇΩ. –ü—Ä–∏–±—ã–ª—å —Å–¥–µ–ª–∫–∏ {profit_percent:.1f}%."
            )
            self.backtest.price_of_pos = 0
            self.backtest.buy(self.settings.lot, prices)
            await self._broadcast_message(mess)

        else:
            mess = "‚ö™ –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º."
            await self._broadcast_message(mess)

    async def _broadcast_message(self, text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –∏ –∫–∞–Ω–∞–ª."""
        await self.bot.send_message(chat_id=self.chat_id, text=text)
        await self.bot.send_message(chat_id=CHANNEL_ID, text=text)

    def get_daily_profit(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å."""
        df = self.backtest.table[1:].copy()
        df.index = pd.to_datetime(df.index)
        last_date = df.index.date.max()
        last_day = df[df.index.date == last_date]

        if len(last_day) > 1:
            first_value = last_day['Account_money'].iloc[0]
            last_value = last_day['Account_money'].iloc[-1]
            change = last_value - first_value
            percentage_change = (change / first_value) * 100
            return change, percentage_change
        else:
            return 0, 0

    def _get_observation(self, df):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."""
        obj = df.index
        current_step = len(obj) - 1
        window_size = 3
        feauteresForTest = ['Close', 'RSI5', 'AD5']
        stated = GetStateIndCombConv1D(obj, current_step, df, feauteresForTest, window_size)
        statedSq = torch.squeeze(stated, 0)
        statedScaled = ScaleValues(statedSq, self.settings.feautData, 2, 3)
        return statedScaled, stated

    async def get_all_candles(self, start, end, interval):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ —Å MOEX –∏ –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –∏—Ö –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞."""
        async with aiohttp.ClientSession() as session:
            try:
                candles = await aiomoex.get_market_candles(
                    session, security='GAZP', interval=interval,
                    start=start, end=end, market='shares', engine='stock'
                )
                if not candles:
                    return None, None

                last_candle = candles[-1]
                df_candle = candles[-CANDLES_NUM:]
                df = pd.DataFrame(df_candle)
                df['datetime'] = pd.to_datetime(df['begin'])
                df.set_index('datetime', inplace=True)
                df = df.drop(columns=["begin", "end"])

                df = df.resample(RESAMPLE_INT).agg({
                    'open': 'first', 'high': 'max', 'low': 'min', 'close': 'last', 'volume': 'sum'
                }).dropna(subset=['open', 'high', 'low', 'close'])

                df.rename(columns={'open': 'Open', 'high': 'High', 'low': 'Low', 'close': 'Close', 'volume': 'Volume'}, inplace=True)
                df['Volume'] = df['Volume'].astype(float)

                # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                df['returns'] = df['Close'] - df['Close'].shift(1)
                rsi_df = calculate_rsi(df, 14)
                df["RSI5"] = rsi_df['rsi_df']
                df["AD5"] = talib.AD(df['High'], df['Low'], df['Close'], df['Volume'])

                return df, last_candle
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π: {e}")
                return None, None

    async def get_securities_info(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ GAZP –Ω–∞ MOEX."""
        async with aiohttp.ClientSession() as session:
            try:
                securities_data = await aiomoex.get_board_securities(
                    session, table='marketdata', board='TQBR',
                    market='shares', engine='stock'
                )
                for item in securities_data:
                    if item.get('SECID') == 'GAZP':
                        update_time_str = item.get('UPDATETIME')
                        time_obj = datetime.strptime(update_time_str, "%H:%M:%S").time()
                        return datetime.combine(datetime.now().date(), time_obj)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    async def run_episode(self, worker_model):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª live-—Ç–æ—Ä–≥–æ–≤–ª–∏: –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        last_processed_time = None
        target_time = time(23, 49, 59)      # –ö–æ–Ω–µ—Ü —Ç–æ—Ä–≥–æ–≤ –≤ –±—É–¥–Ω–∏
        target_time_wekend = time(19, 0, 0) # –ö–æ–Ω–µ—Ü —Ç–æ—Ä–≥–æ–≤ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
        start_time = time(9, 48, 58)        # –ù–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤

        while not self.stop_event.is_set():
            try:
                now = datetime.now()
                weekday = now.weekday()
                only_time = now.time()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                if (weekday < 5 and (only_time > target_time or only_time < start_time)) or \
                   (weekday >= 5 and (only_time > target_time_wekend or only_time < start_time)):
                    await asyncio.sleep(60)
                    continue

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                day_before_yesterday = now - timedelta(days=5)
                start = day_before_yesterday.strftime('%Y-%m-%d')
                end = now.strftime('%Y-%m-%d')
                df, last_candle = await self.get_all_candles(start, end, INTERVAL)
                if df is None or last_candle is None:
                    await asyncio.sleep(60)
                    continue

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π 1-–º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–∏
                if INTERVAL == 10:
                    actual_end = await self.get_securities_info()
                else:
                    last_1min = await self.get_last_candle(end, end, 1)
                    actual_end = pd.to_datetime(last_1min['end']) if last_1min else None

                if actual_end is None:
                    await asyncio.sleep(60)
                    continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–≤–µ—á–∏
                last_30min_time = df.index[-1]
                expected_end = last_30min_time + pd.Timedelta(minutes=RESAMPLE_NUM) - pd.Timedelta(seconds=1)

                if actual_end < expected_end:
                    await asyncio.sleep(10)
                    continue

                if (actual_end - expected_end) > pd.Timedelta(seconds=30):
                    if last_processed_time is None or last_30min_time > last_processed_time:
                        last_processed_time = last_30min_time
                    await asyncio.sleep(10)
                    continue

                if last_processed_time is not None and last_30min_time <= last_processed_time:
                    await asyncio.sleep(10)
                    continue

                # –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è
                state, stateF = self._get_observation(df)
                with torch.no_grad():
                    policy, _ = worker_model(state)
                logits = policy.view(-1)
                action_dist = torch.distributions.Categorical(logits=logits)
                action = action_dist.sample().item()

                logData("action_020925.csv",
                        f"{actual_end},{last_candle['close']},{stateF.numpy()},{state.numpy()},{policy.numpy()}\n")

                await self.step(action, prices=last_candle['close'])
                last_processed_time = last_30min_time
                await asyncio.sleep(10)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_episode: {e}")
                import traceback
                traceback.print_exc()
                await asyncio.sleep(60)

    async def get_last_candle(self, start, end, interval):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é 1-–º–∏–Ω—É—Ç–Ω—É—é —Å–≤–µ—á—É."""
        async with aiohttp.ClientSession() as session:
            try:
                candles = await aiomoex.get_market_candles(
                    session, security='GAZP', interval=interval,
                    start=start, end=end, market='shares', engine='stock'
                )
                return candles[-1] if candles else None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ 1-–º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–∏: {e}")
                return None

    async def send_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤ Telegram-–∫–∞–Ω–∞–ª."""
        try:
            current_money = self.backtest.table['Account_money'].iloc[-1]
            total_profit = current_money - self.settings.startCash
            daily_profit, percentage_change = self.get_daily_profit()

            total_profit_str = f"+{total_profit:,.0f}" if total_profit >= 0 else f"{total_profit:,.0f}"
            daily_profit_str = f"+{daily_profit:,.0f}" if daily_profit >= 0 else f"{daily_profit:,.0f}"

            report = (
                "üìä <b>–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–Å–¢</b> | {date}\n"
                "üí∞ <b>–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:</b> {total_profit} ‚ÇΩ\n"
                "üè¶ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {current_money:,.0f} ‚ÇΩ\n"
                "üìà <b>–ü—Ä–∏–±—ã–ª—å –∑–∞ –¥–µ–Ω—å:</b> {daily_profit} ‚ÇΩ\n"
                "üìä <b>–°–¥–µ–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è:</b> {trades_today}\n"
                "üü¢ <b>–ü–æ–∫—É–ø–æ–∫:</b> {buys}\n"
                "üî¥ <b>–ü—Ä–æ–¥–∞–∂:</b> {sells}\n"
                "‚úÖ <i>–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç</i>"
            ).format(
                date=datetime.now().strftime("%d %B %Y"),
                total_profit=total_profit_str.replace(',', ' '),
                current_money=current_money,
                daily_profit=daily_profit_str.replace(',', ' '),
                trades_today=5, buys=3, sells=2
            )
            await self.bot.send_message(chat_id=CHANNEL_ID, text=report, parse_mode="HTML")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞: {e}")

    async def wait_for_daily_report(self):
        """–û–∂–∏–¥–∞–µ—Ç 21:02 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç."""
        reported_day = None
        while self.is_running:
            now = datetime.now()
            target_time = time(21, 2, 0)
            if now.time() >= target_time and now.date() != reported_day:
                await self.send_daily_report()
                reported_day = now.date()
            await asyncio.sleep(600)

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é."""
        if self.is_running:
            await self.bot.send_message(chat_id=self.chat_id, text="–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
            return

        self.is_running = True
        self.stop_event.clear()

        model = ActorCriticConv1D(2, 64, action_numbers, 1, 1)
        model.load_state_dict(torch.load(PATHFORMODELSPTH))
        self.task = asyncio.create_task(self.run_episode(worker_model=model))
        self.report_task = asyncio.create_task(self.wait_for_daily_report())
        await self.bot.send_message(chat_id=self.chat_id, text="‚úÖ –¢–∞—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã.")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
        if not self.is_running:
            await self.bot.send_message(chat_id=self.chat_id, text="–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
            return

        self.is_running = False
        self.stop_event.set()
        if self.task:
            await self.task
        if self.report_task:
            await self.report_task

        self.backtest.save_state()
        profit = self.backtest.getCurrentProfit(0)
        mess = (
            "üõë –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n"
            f"–î–µ–Ω—å–≥–∏: {self.backtest.my_money:.2f}\n"
            f"–ü–æ–∑–∏—Ü–∏—è: {self.backtest.posVolume}\n"
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {self.backtest.state}\n"
            f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {profit:.2f}"
        )
        await self.bot.send_message(chat_id=self.chat_id, text=mess)


async def run_strategy(bot: Bot, chat_id: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è GAZP."""
    async with aiohttp.ClientSession() as session:
        strategy = Strategy(settings=settings, session=session, bot=bot, chat_id=chat_id)
        command_stop_handler.strategy = strategy

        my_money = strategy.backtest.my_money
        posVolume = strategy.backtest.posVolume
        mess = (
            f"üí∞ –°–≤–æ–±–æ–¥–Ω—ã–µ –¥–µ–Ω—å–≥–∏: {round(my_money, 1)}.\n"
            f"‚öñÔ∏è –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {strategy.backtest.state}.\n"
            f"üí≥ –¶–µ–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {strategy.backtest.price_of_pos} ‚ÇΩ.\n"
            f"üõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –ü–ê–û \"–ì–∞–∑–ø—Ä–æ–º\": {posVolume}."
        )
        await bot.send_message(chat_id=CHANNEL_ID, text=mess)
        await bot.send_message(chat_id=chat_id, text=mess)

        task = asyncio.create_task(strategy.start())
        await bot.send_message(chat_id=chat_id, text="–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—â–µ–Ω–∞.")
        await task


# --- Telegram –∫–æ–º–∞–Ω–¥—ã ---
@router.message(Command(commands=["start"]))
async def command_start_handler(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    global CHAT_ID
    CHAT_ID = message.chat.id
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! ID —á–∞—Ç–∞: {CHAT_ID}")


@router.message(Command(commands=["stop"]))
async def command_stop_handler(message: Message, bot: Bot) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    global CHAT_ID
    CHAT_ID = message.chat.id
    await message.answer("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é...")
    if hasattr(command_stop_handler, 'strategy') and command_stop_handler.strategy:
        await command_stop_handler.strategy.stop()
    else:
        await message.answer("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")


@router.message(Command(commands=["trade"]))
async def command_trade_handler(message: Message, bot: Bot) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    global CHAT_ID
    CHAT_ID = message.chat.id
    await message.answer("–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    asyncio.create_task(run_strategy(bot, CHAT_ID))


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main() -> None:
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())