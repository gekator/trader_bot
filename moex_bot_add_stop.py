
import asyncio
import logging
from datetime import datetime, timedelta, time
from typing import List, Optional
import torch
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import Command
from aiogram.types import Message
from aiohttp import ClientSession

import aiohttp
import aiomoex
import talib

import pandas as pd
import numpy as np

import os.path
from backtest.Trader.Trader import Trader
from backtest.TraderRLModels import ActorCriticConv1D, GetStateIndCombConv1D
from backtest.TraderUtil import readSettings, ScaleValues

from backtest.TraderUtil import  RLSettings
from backtest.createDirectory import makeFolderName, makeDir
from backtest.Trader.TraderTelegram import Trader
from config import TOKEN, ADMIN_ID, CHANNEL_ID

INTERVAL=10
if INTERVAL == 10:
    RESAMPLE_NUM = 30
    RESAMPLE_INT = str(RESAMPLE_NUM) + 'T'
    CANDLES_NUM = 14*12 + 3*3
elif INTERVAL == 1:
    RESAMPLE_NUM = 5
    RESAMPLE_INT = str(RESAMPLE_NUM) + 'T'
    CANDLES_NUM = 14*5 + 3*3

class MM:
    MAX = 0
    MIN = 0

class Feauteres:
    names = 0
    minmax = 0

def getFeautersDataFromFile(pathToFile, feauter):
    df = pd.read_csv(pathToFile).set_index("NameOfParam")
    #("df getFeautersDataFromFile(pathToFile, feauter)", df)
    returns_MAX = df.loc["returns_MAX","Values"]
    returns_MIN = df.loc["returns_MIN","Values"]
    RSI_5_MAX = df.loc["RSI_5_MAX","Values"]
    RSI_5_MIN = df.loc["RSI_5_MIN","Values"]
    AD5_returns_MAX = df.loc["AD5_returns_MAX","Values"]
    AD5_returns_MIN = df.loc["AD5_returns_MIN","Values"]
    OneVals = MM();OneVals.MAX = returns_MAX; OneVals.MIN = returns_MIN
    SecondVals = MM();SecondVals.MAX = RSI_5_MAX; SecondVals.MIN = RSI_5_MIN;
    ThreeVals = MM(); ThreeVals.MAX = AD5_returns_MAX; ThreeVals.MIN = AD5_returns_MIN;
    names = feauter
    minmax = [OneVals, SecondVals, ThreeVals]
    feauteresData = Feauteres()
    feauteresData.names = names
    feauteresData.minmax = minmax
    return feauteresData

def logData(file, string):
    with open(file, "a") as myfile:
        #print(file)
        myfile.write(string)

def calculate_rsi(data, rsi_period):
    dataset = data.copy()
    delta = dataset['Close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=rsi_period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=rsi_period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    dataset['rsi_df'] = rsi
    dataset['rsi_df'] = dataset['rsi_df'].shift(1)
    return dataset

#TICKER = 'EURUSD'
pathToFile = "/backtest/TraderExamples/Settings/SettingsGAZPTrain_7-10-2024_13-2-2025_01092025.csv"
TICKER, nameOfTicker, timeDelta, folderName, rewardType, nameOfDates, nameOfTestDates , dateName, lots, startCash, comisBroker, comisMoex, del_r, Gamma, Clc, lr, gran, will, rewardMult, willBeGap_using, willBeGap_value, passLoopForward, dontMakeCurrentDeals=readSettings(pathToFile)
PERIOD = '/'+ str(timeDelta) +'m/'
comis = (comisBroker, comisMoex) 

folderName = makeFolderName(folderName, comis[0], Gamma, Clc, lr, del_r, gran, will)
nameOfModel = "GAZP_ActorCriticConv1D_Tr_Rw=410748_Test_Rw=139382_returns_RSI5_sc_AD5_returns_sc__ep=490"

PATHFORMODELS = "/backtest/TrainedModels/" + TICKER + PERIOD + folderName

PATHFORMODELSPTH = PATHFORMODELS+ "pth/" + nameOfModel + ".pth"
PATHFORPDF= PATHFORMODELS + "test/" + nameOfModel
PATHFORJITMODELS = PATHFORMODELS + "l/" + nameOfModel + "_jit.pt"

pathForData = PATHFORMODELS + "data/"
pathForCurrentTestFolder = PATHFORMODELS + "test/" + nameOfModel.split("=")[-1] + "/"


fileLogName = "Log.txt"
isLogExist = os.path.exists(pathForCurrentTestFolder + fileLogName)
if isLogExist:
    fileLogName = "Log2.txt"

nameOfPreparedDataFile = nameOfTicker + nameOfDates + ".csv"

nameOfTestDataFile =  nameOfTicker + nameOfTestDates + "_Test"+ ".csv"

nameOfMinMaxDataFile = nameOfDates + "_MINMAX.csv"

settings = RLSettings(pathForCurrentTestFolder, lots, lots, startCash, comis, rewardType, del_r, gran ,will, timeDelta, rewardMult, Gamma, Clc, lr, willBeGap_using,  willBeGap_value, passLoopForward, dontMakeCurrentDeals)
#########################################################################
#reading dataset
feauteres = ['returns', 'RSI5_sc', 'AD5_returns_sc']
feauteresForTest = ['Close', 'RSI5', 'AD5']
feautersData = getFeautersDataFromFile(pathForData + nameOfMinMaxDataFile, feauteresForTest)
settings.feautData = feautersData
#print("feauteresData.names,  feauteresData.minmax",  feautersData.names,  feautersData.minmax)
#print(feauteres)
numOfFeauteres = len(feauteres)
action_numbers = 3


# # Check its architecture
# model.summary()


# ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö
# –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –Ω–∞–ø–∏—Å–∞–≤ –±–æ—Ç—É /start –∏ –ø–æ—Å–º–æ—Ç—Ä–µ–≤ –≤ –ª–æ–≥–∏
CHAT_ID = None

# --- –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ ---
router = Router()

def wait_until_next_30min():
    """–ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ 30-–º–∏–Ω—É—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: 00 –∏–ª–∏ 30 –º–∏–Ω—É—Ç –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞."""
    now = datetime.now()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π "30" –∏–ª–∏ "00"
    minutes = now.minute
    seconds = now.second + now.microsecond / 1_000_000

    if minutes < 30:
        next_time = now.replace(minute=30, second=0, microsecond=0)
    else:
        next_time = (now + timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)

    wait_seconds = (next_time - now).total_seconds()
    return asyncio.sleep(wait_seconds)

def wait_until_next_interval(interval_minutes: int = 5):
    """
    –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –∫—Ä–∞—Ç–Ω–æ–≥–æ interval_minutes.
    –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ interval_minutes=5: 12:00, 12:05, 12:10, 12:15, ...
    """
    now = datetime.now()
    # –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–æ —Å –Ω–∞—á–∞–ª–∞ —á–∞—Å–∞
    minutes_since_hour = now.minute
    # –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª
    remainder = minutes_since_hour % interval_minutes
    # –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∞—è "–º–µ—Ç–∫–∞"
    if remainder == 0:
        # –£–∂–µ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ ‚Äî –∂–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ
        next_minute = now.minute + interval_minutes
    else:
        next_minute = (minutes_since_hour - remainder) + interval_minutes

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —á–∞—Å, –µ—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —á–∞—Å–∞
    if next_minute >= 60:
        next_time = (now + timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)
    else:
        next_time = now.replace(minute=next_minute, second=0, microsecond=0)

    wait_seconds = (next_time - now).total_seconds()
    return asyncio.sleep(wait_seconds)

def is_time_to_act(candle_time: datetime, interval_minutes: int = 5) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è —Å–≤–µ—á–∏ "–º–µ—Ç–∫–æ–π" –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:15, 12:20).
    """
    # –û–∫—Ä—É–≥–ª—è–µ–º –≤—Ä–µ–º—è —Å–≤–µ—á–∏ –¥–æ –±–ª–∏–∂–∞–π—à–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π –º–µ—Ç–∫–∏
    minutes = candle_time.minute
    remainder = minutes % interval_minutes
    
    # –ï—Å–ª–∏ remainder == 0, –∑–Ω–∞—á–∏—Ç, –≤—Ä–µ–º—è –∫—Ä–∞—Ç–Ω–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
    return remainder == 0

class Strategy:
    def __init__(
        self,
        settings: RLSettings,
        session: Optional[ClientSession],
        bot: Bot,           # –î–æ–±–∞–≤–∏—Ç—å
        chat_id: int        # –î–æ–±–∞–≤–∏—Ç—å
        
    ):
        self.session = session
        self.settings = settings
        self.check_interval = 10
        self.test = False
        #self.backtest =  Trader(self.settings.startCash, self.settings.comis, True)
        self.backtest = Trader.load_state(money=settings.startCash,
                                        comis=settings.comis,
                                        printBool=True)
        self.bot = bot              # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç–∞
        self.chat_id = chat_id      # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id
        self.is_running = False  # –§–ª–∞–≥: —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        self.stop_event = asyncio.Event()  # –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.task = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É
        self.report_task = None



    async def step(self, Signal: int, prices: float):
        endOfDataframe = False
        print("–∑–∞—à–ª–∏ –≤ step")
        current_price_str = f"{prices:.2f}".replace('.', ',')  # 133.21 ‚Üí 133,21
        ticker_name = "–ü–ê–û \"–ì–∞–∑–ø—Ä–æ–º\""

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å
        current_profit = self.backtest.getCurrentProfit(prices)
        if self.backtest.posVolume != 0:
            profit_percent = (current_profit / abs(self.backtest.moneyOnStartDeal)) * 100 if self.backtest.moneyOnStartDeal != 0 else 0
        else:
            profit_percent = 0

        if Signal == 2 and self.backtest.state == "zero" and (not endOfDataframe):# and rsi5 < -rsi_max:
            self.backtest.price_of_pos = prices
            self.backtest.buy(self.settings.lot, prices)
            assert self.backtest.state == "Long", f"–û–∂–∏–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'Long', –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: {self.backtest.state}"
            
            mess = f"‚¨ÜÔ∏èüü¢ –ü–æ–∫—É–ø–∫–∞ –∞–∫—Ü–∏–π {ticker_name} –ø–æ —Ü–µ–Ω–µ {current_price_str} ‚ÇΩ."
            await self.bot.send_message(chat_id=self.chat_id, text=mess)
            await self.bot.send_message(chat_id=CHANNEL_ID, text=mess)
            print(mess)
        elif Signal == 0 and self.backtest.state == "zero" and (not endOfDataframe):# and rsi5 > rsi_max:
            self.backtest.price_of_pos = prices
            self.backtest.sell(self.settings.lot, prices)
            assert self.backtest.state == "Short", f"–û–∂–∏–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'Long', –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: {self.backtest.state}"
            
            mess = f"‚¨áÔ∏èüî¥ –ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ü–∏–π {ticker_name} –ø–æ —Ü–µ–Ω–µ {current_price_str} ‚ÇΩ."
            await self.bot.send_message(chat_id=self.chat_id, text=mess)
            await self.bot.send_message(chat_id=CHANNEL_ID, text=mess)
            print(mess)
        elif ((Signal == 1 and self.backtest.state == "zero") or (Signal == 1 and self.backtest.state == "Long") or (Signal == 1 and self.backtest.state == "Short") or (Signal == 2 and self.backtest.state == "Long") or (Signal == 0 and self.backtest.state == "Short")) and (not endOfDataframe):
            mess = (
                f"üü° –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø–æ–∑–∏—Ü–∏—è {self.backtest.state}. "
                f"–¶–µ–Ω–∞ {current_price_str} ‚ÇΩ."
            )
            await self.bot.send_message(chat_id=self.chat_id, text=mess)
            await self.bot.send_message(chat_id=CHANNEL_ID, text=mess)
            print("–ù–∏—á–µ–≥–æ")

        elif (self.backtest.state == "Long" and Signal == 0) or (self.backtest.state == "Long" and (Signal == 1 or Signal == 2) and endOfDataframe):
            profit_abs = current_profit
            profit_percent = (profit_abs / self.backtest.moneyOnStartDeal) * 100 if self.backtest.moneyOnStartDeal != 0 else 0
            mess = (
                f"‚¨áÔ∏è –ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ü–∏–π {ticker_name} –ø–æ —Ü–µ–Ω–µ {current_price_str} ‚ÇΩ. "
                f"–ü—Ä–æ—Ñ–∏—Ç –æ—Ç —Å–¥–µ–ª–∫–∏ {profit_abs:.1f} ‚ÇΩ."
                f"–ü—Ä–∏–±—ã–ª—å —Å–¥–µ–ª–∫–∏ {profit_percent:.1f}%."
            )
            self.backtest.price_of_pos = 0
            self.backtest.sell(self.settings.lot, prices)
            await self.bot.send_message(chat_id=self.chat_id, text=mess)
            await self.bot.send_message(chat_id=CHANNEL_ID, text=mess)
            print(mess)
            
        elif (self.backtest.state == "Short" and Signal == 2) or (self.backtest.state == "Short" and (Signal == 1 or Signal == 0) and endOfDataframe):
            profit_abs = current_profit
            profit_percent = (profit_abs / self.backtest.start_money) * 100 if self.backtest.start_money != 0 else 0
            mess = (
                f"‚¨ÜÔ∏è –ü–æ–∫—É–ø–∫–∞ –∞–∫—Ü–∏–π {ticker_name} –ø–æ —Ü–µ–Ω–µ {current_price_str} ‚ÇΩ. "
                f"–ü—Ä–æ—Ñ–∏—Ç –æ—Ç —Å–¥–µ–ª–∫–∏ {profit_abs:.1f} ‚ÇΩ."
                f"–ü—Ä–∏–±—ã–ª—å —Å–¥–µ–ª–∫–∏ {profit_percent:.1f}%."
            )
            self.backtest.price_of_pos = 0
            self.backtest.buy(self.settings.lot, prices)
            
            await self.bot.send_message(chat_id=self.chat_id, text=mess)
            await self.bot.send_message(chat_id=CHANNEL_ID, text=mess)
            print(mess)
            
        elif (self.backtest.state == "zero" and endOfDataframe):# –Ω—É–∂–Ω–æ –ª–∏ —ç—Ç–æ –∑–¥–µ—Å—å?????????????????
            mess = (
                f"üü° –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø–æ–∑–∏—Ü–∏—è {self.backtest.state}. "
                f"–¶–µ–Ω–∞ {current_price_str} ‚ÇΩ."
            )
            await self.bot.send_message(chat_id=self.chat_id, text=mess)
            await self.bot.send_message(chat_id=CHANNEL_ID, text=mess)
            print("–ù–∏—á–µ–≥–æ 3")
        else:
            mess = "‚ö™ –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º."
            await self.bot.send_message(chat_id=self.chat_id, text=mess)
            await self.bot.send_message(chat_id=CHANNEL_ID, text=mess)
            print("–ù–∏—á–µ–≥–æ 4")
    
    def get_daily_profit(self):
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        """df = pd.read_csv('out.csv')
        df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
        print("df", df)
        #df = df[1:]"""
        df = self.backtest.table
        df = df[1:]
        df.index = pd.to_datetime(df.index)
        print("df-++++++++++++++++++++++++++++++++++++++++++++++++++\n", df)
        print("type(df['Date'])", type(df.index), df.index)
        #df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
        print("df-----------------------------------------------------\n", df)
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è
        last_date = df.index.date.max()
        print("last_date", last_date)
        last_day = df[df.index.date == last_date]
        print("last_day", last_day)

        # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if len(last_day) > 1:
            first_value = last_day['Account_money'].iloc[0]
            last_value = last_day['Account_money'].iloc[-1]
            change = last_value - first_value
            percentage_change = (change / first_value) * 100
            
            print(f"–î–∞—Ç–∞: {last_date}")
            print(f"–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {first_value}")
            print(f"–ö–æ–Ω–µ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {last_value}")
            print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {percentage_change:.2f}%")
        else:
            print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å")
        return change, percentage_change


    def _get_observation(self, df):
        """–°–æ–±–∏—Ä–∞–µ–º –≤–µ–∫—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–∫–Ω–æ —Å–≤–µ—á–µ–π
        obj = df.index
        current_step = len(obj)-1
        window_size = 2+1
        feauteresForTest = ['Close', 'RSI5', 'AD5']
        
        #print("–∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞")

        stated = GetStateIndCombConv1D(obj, current_step, df, feauteresForTest, window_size)
        #print("GetStateIndCombConv1D")
        statedSq = torch.squeeze(stated, 0)#torch.Size([2, 4])
        statedScaled = ScaleValues(statedSq, self.settings.feautData, 2, 3)#torch.Size([2, 4])
        print("stated scaled", stated)
        return statedScaled, stated

    async def get_all_candles(self, start, end, interval):
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π —Å MOEX."""
        print("–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π —Å MOEX.")
        async with aiohttp.ClientSession() as session:
            try:
                candles = await aiomoex.get_market_candles(
                            session,
                            security='GAZP',
                            interval=interval,  # 1 - 1 –º–∏–Ω—É—Ç–∞
                            start = start,
                            end = end,
                            market='shares',
                            engine='stock'
                        )
                if not candles:
                    print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å MOEX (–ø–æ–ø—ã—Ç–∫–∞ { 1})")
                    #await asyncio.sleep(5)
                    #continue
                print("–ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ.")
                last_candle = candles[-1]
                df_candle = candles[- CANDLES_NUM:]
                df = pd.DataFrame(df_candle)
                df['datetime'] = pd.to_datetime(df['begin'], format='%Y-%m-%d %H:%M:%S')
                df = df.drop(columns=["begin", "end"])
                df.set_index('datetime', inplace=True)
                #print("df", df, len(df))

                df = df.resample(RESAMPLE_INT).agg({
                    'open': 'first',   # –¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                    'high': 'max',     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
                    'low': 'min',      # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
                    'close': 'last',   # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                    'volume': 'sum'    # –°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º –∑–∞ –ø–µ—Ä–∏–æ–¥
                })
                df= df.dropna(subset=['open', 'high', 'low', 'close'])
                #print("df30", df)
                df.rename(columns = {'open': 'Open', 'high': 'High', 'low': 'Low', 'close': 'Close', 'volume':'Volume'}, inplace=True)
                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ –∑–∞ 30 –º–∏–Ω—É—Ç –Ω–µ –±—ã–ª–æ –¥–∞–Ω–Ω—ã—Ö)
                #df_30min.dropna(inplace=True)
                
                #print("30-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏:")
                #print(df)

                df['Volume'] = df['Volume'].astype(float)

                # –≠—Ç–æ –º–æ–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                df['log_returns'] = np.log(df['Close'] / df['Close'].shift(1))
                df['returns'] = df['Close'] - df['Close'].shift(1)

                #–≠—Ç–æ –º—ã –Ω–∞—á–∏–Ω–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å talib
                Close = df.loc[:, "Close"].values
                Open = df.loc[:, "Open"].values
                High = df.loc[:, "High"].values
                Low = df.loc[:, "Low"].values
                Volume = df.loc[:, "Volume"].values
                print("--------------------------------------------------------------")
                #i_rsi5 = talib.RSI(Close, timeperiod=14)#RSI
                rsi_df = calculate_rsi(df, 14)
                df["RSI5"] = rsi_df['rsi_df']

                i_ad5 = talib.AD(High, Low, Close, Volume)
                print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
                #df["RSI5"] = i_rsi5
                df["AD5"] = i_ad5
                last_price = last_candle.get('close')
                print("df*********************************************************\n", df)
                
                return df, last_candle
            except Exception as e:
                    print(f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π: {e}")
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å MOEX –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
        return None, None

    
    async def get_last_candle(self, start, end, interval):
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π —Å MOEX."""
        async with aiohttp.ClientSession() as session:
            try:
                candles = await aiomoex.get_market_candles(
                            session,
                            security='GAZP',
                            interval=interval,  # 1 - 1 –º–∏–Ω—É—Ç–∞
                            start = start,
                            end = end,
                            market='shares',
                            engine='stock'
                        )
                last_candle_1m = candles[-1]
                print("last_candle_1m", last_candle_1m)
                return  last_candle_1m
            except Exception as e:
                print(f"‚ùå‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    
    async def get_securities_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏–∏ GAZP –≤ —Ä–µ–∂–∏–º–µ TQBR."""
        async with aiohttp.ClientSession() as session:
            try:
                # get_board_securities –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥–∞—Ö –Ω–∞ –¥–æ—Å–∫–µ
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º table='marketdata' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                securities_data = await aiomoex.get_board_securities(
                    session,
                    table='marketdata', # –í–∞–∂–Ω–æ: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É marketdata
                    columns=None, # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
                    board='TQBR',
                    market='shares',
                    engine='stock'
                )

                if securities_data:
                    # –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –¥–ª—è GAZP –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ—Ö –±—É–º–∞–≥
                    gazp_data = None
                    for item in securities_data:
                        if item.get('SECID') == 'GAZP':
                            gazp_data = item
                            break

                    if gazp_data:
                        #print("\n–¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è GAZP –∏–∑ get_board_securities (marketdata):")
                        #print(gazp_data)
                        # –ü–æ–ª—è –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ API
                        last_price = gazp_data.get('LAST')
                        change = gazp_data.get('CHANGE')
                        update_time = gazp_data.get('UPDATETIME')
                        bid = gazp_data.get('BID')
                        offer = gazp_data.get('OFFER')
                        """print(f"\n–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (LAST): {last_price}")
                        print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (CHANGE): {change}")
                        print(f"–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (UPDATETIME): {update_time}")
                        print(f"–õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (BID): {bid}")
                        print(f"–õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (OFFER): {offer}")"""
                        y = datetime.now()
                        print("datetime.now()", y)
                        # 1. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç time
                        time_obj = datetime.strptime(update_time, "%H:%M:%S").time()
                        # 2. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π datetime: –¥–∞—Ç–∞ –∏–∑ y, –≤—Ä–µ–º—è –∏–∑ x
                        new_datetime = datetime.combine(y.date(), time_obj)
                        print(new_datetime)
                        return new_datetime
                    else:
                        print("\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è GAZP –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö marketdata.")
                else:
                    print("\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ marketdata.")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥–∞—Ö: {e}")
            return None
    
    async def run_episode(self, worker_model):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª live —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
        print("–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª live —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ async def run_episode(worker_model, sessiion)")
        print("–ø–æ–¥–æ–∂–¥–∞–ª–∏")
        last_processed_time = None  # –ß—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–Ω—É —Å–≤–µ—á—É –¥–≤–∞–∂–¥—ã
        #is_market_work
        target_time = time(23, 49, 59)
        target_time_wekend = time(19, 00, 00)
        start_time = time(9, 48, 58) 
        while not self.stop_event.is_set():
            try:
                today = datetime.today()
                weekday = today.weekday()
                if weekday == 5:  # –°—É–±–±–æ—Ç–∞
                    print("–°–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞!")
                elif weekday == 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    print("–°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ!")
                else:
                    print("–°–µ–≥–æ–¥–Ω—è –±—É–¥–Ω–∏–π –¥–µ–Ω—å")
                day_before_yesterday = today - timedelta(days=5)
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                start = day_before_yesterday.strftime('%Y-%m-%d')
                end = today.strftime('%Y-%m-%d')
                now_time = datetime.now()
                only_time = now_time.time()
                if (only_time > target_time or only_time < start_time) and weekday < 5:
                    print(f"‚è≥ –í—Ä–µ–º—è  {only_time}. –¢–æ—Ä–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –û–∂–∏–¥–∞–µ–º –Ω–∞—á–∞–ª–æ...")
                    await asyncio.sleep(60)
                    continue
                elif (only_time > target_time_wekend or only_time < start_time) and weekday >= 5:
                    print(f"‚è≥ –í—Ä–µ–º—è  {only_time}. –¢–æ—Ä–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –û–∂–∏–¥–∞–µ–º –Ω–∞—á–∞–ª–æ...")
                    await asyncio.sleep(60)
                    continue
                print("run_episode", "–ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ")
                df, last_candle = await self.get_all_candles(start, end, INTERVAL)

                if df is None or last_candle is None:
                    print("üí§ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å MOEX. –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(60)
                    continue

                if INTERVAL == 10:
                    last_1min_candle = await self.get_securities_info()
                elif INTERVAL == 1:
                    #last_1min_candle = pd.to_datetime(last_candle['end'])
                    last_1min_candle = await self.get_last_candle(end, end, 1)

                if last_1min_candle is None:
                    print("üí§ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å MOEX. –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(60)
                    continue
                print("getCurrentProfit, ", str(self.backtest.getCurrentProfit(last_candle['close'])))
                print("–¶–µ–Ω–∞, ", str(last_candle['close']))
                print("last_candle ", last_candle)
                if len(df) < 2:
                    await asyncio.sleep(10)
                    continue

                # --- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ ---
                last_30min_time = df.index[-1]  # –í—Ä–µ–º—è 30-–º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–∏
                print("last_30min_time", last_30min_time)
                expected_end = last_30min_time + pd.Timedelta(minutes=RESAMPLE_NUM) - pd.Timedelta(seconds=1)
                print("expected_end ", expected_end)
                if INTERVAL == 10:
                    actual_end = last_1min_candle
                elif INTERVAL == 1:
                    actual_end = pd.to_datetime(last_1min_candle['end'])
                print("actual_end ", actual_end)

                # --- –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–≤–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞? ---
                if actual_end < expected_end:
                    print(f"‚è≥ –°–≤–µ—á–∞ {last_30min_time} –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–∂–∏–¥–∞–µ–º...")
                    await asyncio.sleep(10)
                    continue
                else:
                    print(f"‚è≥ –°–≤–µ—á–∞ {last_30min_time} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞—Ä–∞—è –ª–∏ –æ–Ω–∞...")

                # --- –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Å—Ç–∞—Ä–∞—è —Å–≤–µ—á–∞? ---
                now = actual_end
                max_delay = pd.Timedelta(seconds=30)  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                time_since_end = now - expected_end
                if time_since_end > max_delay:
                    print(f"‚è∞ –°–≤–µ—á–∞ {last_30min_time} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ ({expected_end}). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    # –í—Å–µ —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º last_processed_time, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    if last_processed_time is None or last_30min_time > last_processed_time:
                        last_processed_time = last_30min_time
                    await asyncio.sleep(10)
                    continue
                else:
                    print(f"‚úÖ –°–≤–µ—á–∞ {last_30min_time} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ. –ú–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å.")

                # --- 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É —Å–≤–µ—á—É ---
                if last_processed_time is not None and last_30min_time <= last_processed_time:
                    print("last_processed_time is not None and last_30min_time <= last_processed_time")
                    await asyncio.sleep(10)
                    continue
                else:
                    print("–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏, –∏–¥–µ–º –¥–∞–ª—å—à–µ...")

                # --- 4. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å ---
                print(f"‚úÖ –°–≤–µ—á–∞ {last_30min_time} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...")
                obj = df.index
                print("obj", obj)
                profit = self.backtest.quant_money(last_candle['close'], obj[-1])
                print("getCurrentProfit, ", profit)
                print("self.backtest.table", self.backtest.table)

                state, stateF = self._get_observation(df)
                #print("state = self._get_observation(stated)", state)
                with torch.no_grad():
                    policy, value = worker_model(state)
                logits = policy.view(-1)
                action_dist = torch.distributions.Categorical(logits=logits)
                logData("action_020925.csv", str(actual_end)+","+str(last_candle['close'])+","+str(stateF.numpy())+","+str(state.numpy())+","+str(policy.numpy())+"\n")
                action = action_dist.sample().item()  # .item() ‚Äî int
                print("action", action)
                # await self.ensure_market_open()  # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å
                await self.step(action, prices=last_candle['close'])  # –ø–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å MOEX
                # –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–∞–µ–º live —Ä–µ–∂–∏–º
                # –∫–æ–¥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è live
                # —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ live_check_can_we_open_position
                            # --- 5. –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —ç—Ç—É —Å–≤–µ—á—É ---
                last_processed_time = last_30min_time

                # --- 6. –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–π –≤–æ–∑–º–æ–∂–Ω–æ–π —Å–≤–µ—á–∏ ---
                print("–û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é 30-–º–∏–Ω—É—Ç–Ω—É—é —Å–≤–µ—á—É...")
                await asyncio.sleep(10)  # –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                import traceback
                traceback.print_exc()
                # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –∂–¥—ë–º –º–∏–Ω—É—Ç—É –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                await asyncio.sleep(60)

    async def run_episode2(self, worker_model):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ‚Äî –æ–¥–∏–Ω —à–∞–≥ –Ω–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π 5-–º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–µ."""
        last_processed_time = None  # –ß—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–Ω—É —Å–≤–µ—á—É –¥–≤–∞–∂–¥—ã
        expected_end = None
        target_time = time(23, 49, 59)
        target_time_wekend = time(19, 00, 00)
        start_time = time(9, 48, 58) 
        while not self.stop_event.is_set():
            try:
                # --- 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ ---
                today = datetime.today()
                weekday = today.weekday()
                if weekday == 5:  # –°—É–±–±–æ—Ç–∞
                    print("–°–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞!")
                elif weekday == 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    print("–°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ!")
                else:
                    print("–°–µ–≥–æ–¥–Ω—è –±—É–¥–Ω–∏–π –¥–µ–Ω—å")
                day_before = today - timedelta(days=3)
                start = day_before.strftime('%Y-%m-%d')
                end = today.strftime('%Y-%m-%d')
                now = datetime.now()
                only_time = now.time()
                if (only_time > target_time or only_time < start_time) and weekday < 5:
                    print(f"‚è≥ –í—Ä–µ–º—è  {now}. –¢–æ—Ä–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –û–∂–∏–¥–∞–µ–º –Ω–∞—á–∞–ª–æ...")
                    await asyncio.sleep(60)
                    continue
                if (only_time > target_time_wekend or only_time < start_time) and weekday >= 5:
                    print(f"‚è≥ –í—Ä–µ–º—è  {now}. –¢–æ—Ä–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –û–∂–∏–¥–∞–µ–º –Ω–∞—á–∞–ª–æ...")
                    await asyncio.sleep(60)
                    continue
                df_5min, last_candle = await self.get_all_candles(start, end, INTERVAL)
                if len(df_5min) < 2:
                    await asyncio.sleep(10)
                    continue

                # --- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ ---
                last_5min_time = df_5min.index[-1]  # –í—Ä–µ–º—è 5-–º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–∏
                print("last_5min_time", last_5min_time)
                last_expected_end = expected_end
                expected_end = last_5min_time + pd.Timedelta(minutes=5) - pd.Timedelta(seconds=1)
                print("expected_end", expected_end)
                actual_end = pd.to_datetime(last_candle['end'])
                print("actual_end", actual_end)
                print("last_expected_end", last_expected_end)

                
                if actual_end < expected_end and expected_end == last_expected_end:
                    print(f"‚è≥ –°–≤–µ—á–∞ {last_5min_time} –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–∂–∏–¥–∞–µ–º...")
                    await asyncio.sleep(10)
                    continue
                elif expected_end != last_expected_end:
                    if last_expected_end is None:
                        print("last_expected_end is None, continue")
                        continue
                    elif last_expected_end is not None and actual_end - last_expected_end <= pd.Timedelta(seconds=30):
                        print(f"‚è≥ –°–≤–µ—á–∞ {last_5min_time} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò–¥–µ–º –¥–∞–ª—å—à–µ...")
                # --- 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É —Å–≤–µ—á—É ---
                if last_processed_time is not None and last_5min_time <= last_processed_time:
                    await asyncio.sleep(10)
                    continue

                # --- 4. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å ---
                print(f"‚úÖ –°–≤–µ—á–∞ {last_5min_time} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...")
                obj = df_5min.index
                print("obj", obj)
                profit = self.backtest.quant_money(last_candle['close'], obj[-1])
                print("getCurrentProfit, ", profit)
                print("self.backtest.table", self.backtest.table)

                state = self._get_observation(df_5min)
                with torch.no_grad():
                    policy, value = worker_model(state)
                logits = policy.view(-1)
                action_dist = torch.distributions.Categorical(logits=logits)

                action = action_dist.sample().item()

                await self.step(Signal=action, prices=last_candle['close'])

                # --- 5. –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —ç—Ç—É —Å–≤–µ—á—É ---
                last_processed_time = last_5min_time

                # --- 6. –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–π –≤–æ–∑–º–æ–∂–Ω–æ–π —Å–≤–µ—á–∏ ---
                print("–û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é 5-–º–∏–Ω—É—Ç–Ω—É—é —Å–≤–µ—á—É...")
                await asyncio.sleep(10)  # –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                import traceback
                traceback.print_exc()
                await asyncio.sleep(60)

            #await asyncio.sleep(self.check_interval)
    async def send_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –∫–∞–Ω–∞–ª"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–±–µ–∑ –¥–∞—Ç—ã)
            now = datetime.now()
            date = now.date()  # datetime.time –æ–±—ä–µ–∫—Ç
            #print("self.backtest.table", self.backtest.table)
            #print("self.backtest.table Account_money", self.backtest.table['Account_money'])
            current_money = self.backtest.table['Account_money'][-1]
            print("current_money", current_money)
            start_money = self.settings.startCash
            total_profit = current_money - start_money
            print("total_profit", total_profit)
            daily_profit, percentage_change = self.get_daily_profit()  # –†–µ–∞–ª–∏–∑—É–µ–º –Ω–∏–∂–µ
            #last_action_time = self.get_last_action_time()  # –ú–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ Trader
            print("daily_profit, percentage_change", daily_profit, percentage_change)
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            total_profit_str = f"+{total_profit:,.0f}" if total_profit >= 0 else f"{total_profit:,.0f}"
            daily_profit_str = f"+{daily_profit:,.0f}" if daily_profit >= 0 else f"{daily_profit:,.0f}"
            print("–≥–æ—Ç–æ–≤–∏–º –æ—Ç—á–µ—Ç")
            report = (
                "üìä <b>–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–Å–¢</b> | {date}\n\n"
                "üí∞ <b>–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:</b> {total_profit} ‚ÇΩ\n"
                "üè¶ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {current_money:,.0f} ‚ÇΩ\n"
                "üìà <b>–ü—Ä–∏–±—ã–ª—å –∑–∞ –¥–µ–Ω—å:</b> {daily_profit} ‚ÇΩ\n"
                "üìä <b>–°–¥–µ–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è:</b> {trades_today}\n"
                "üü¢ <b>–ü–æ–∫—É–ø–æ–∫:</b> {buys}\n"
                "üî¥ <b>–ü—Ä–æ–¥–∞–∂:</b> {sells}\n"
                #"üïí <b>–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞:</b> {last_time}\n\n"
                "‚úÖ <i>–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç</i>"
            ).format(
                date=datetime.now().strftime("%d %B %Y"),
                total_profit=total_profit_str.replace(',', ' '),
                current_money=current_money,
                daily_profit=daily_profit_str.replace(',', ' '),
                trades_today=5,   # –ü—Ä–∏–º–µ—Ä ‚Äî –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
                buys=3,
                sells=2,
                #last_time=last_action_time or "‚Äî"
            )

            await self.bot.send_message(
                chat_id=CHANNEL_ID,
                text=report,
                parse_mode="HTML"
            )
            print("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞: {e}")

    async def wait_for_daily_report(self):
        """–ñ–¥—ë–º 19:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç"""
        print("‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùåself.is_running", self.is_running)
        day = None
        while self.is_running:
            now = datetime.now()
            print("‚åö‚åö‚åö‚åö‚åö‚åö‚åö‚åötime now", now)
            target_time = time(21, 2, 0)  # 19:00:00

            # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ + 19:00
            report_dt = datetime.combine(now.date(), target_time)

            # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ 19:00 ‚Äî –∂–¥—ë–º –∑–∞–≤—Ç—Ä–∞
            if now.time() >= target_time:
                report_dt += timedelta(days=1)

            wait_seconds = (report_dt - now).total_seconds()
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –¥–æ {report_dt.strftime('%Y-%m-%d %H:%M')}")

            # –ñ–¥—ë–º, –Ω–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π stop_event
            """try:
                await asyncio.wait_for(self.stop_event.wait(), timeout=wait_seconds)
                # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚Äî –≤—ã—Ö–æ–¥–∏–º
                print(f"‚è≥‚è≥‚è≥ –û–∂–∏–¥–∞–µ–º self.stop_event.wait()-------------------------------: {e}")
                return
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞: {e}")"""
                # –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
            if self.is_running and day != now.date() and now.time() >= target_time:
                 await self.send_daily_report()
                 day = now.date()
            else:
                await asyncio.sleep(600)
                continue

        print("–û—Ç—á—ë—Ç: —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."""
        
        if self.is_running:
            await self.bot.send_message(chat_id=self.chat_id, text="–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
            return

        self.is_running = True
        self.stop_event.clear()
        print("–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ async def start")
        action_numbers = 3
        BATCHSIZE = 1
        model = ActorCriticConv1D(2, 64, action_numbers, BATCHSIZE, 1)
        model.load_state_dict(torch.load(PATHFORMODELSPTH))  # –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        print("–º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        #await self.run_episode(worker_model=model)
        self.task = asyncio.create_task(self.run_episode(worker_model=model))  # –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.report_task = asyncio.create_task(self.wait_for_daily_report())  # üî• –û—Ç—á—ë—Ç
        print("5. run_episode –∑–∞–≤–µ—Ä—à—ë–Ω (–Ω–æ –æ–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π, —Ç–∞–∫ —á—Ç–æ —Å—é–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)")
        await self.bot.send_message(chat_id=self.chat_id, text="‚úÖ –¢–∞—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã.")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
        if not self.is_running:
            await self.bot.send_message(chat_id=self.chat_id, text="–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
            return

        self.is_running = False
        self.stop_event.set()  # –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–∏–∫–ª
        if self.task:
            await self.task
        if self.report_task:
            await self.report_task

        self.task = None
        self.report_task = None

        # –°–æ—Ö—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        self.backtest.save_state()

        # –û—Ç–ø—Ä–∞–≤–∏–º –æ—Ç—á—ë—Ç
        my_money = self.backtest.my_money
        posVolume = self.backtest.posVolume
        state = self.backtest.state
        profit = self.backtest.getCurrentProfit(0)  # –ò–ª–∏ –ø–µ—Ä–µ–¥–∞–π –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
        mess = (
            "üõë –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n"
            f"–î–µ–Ω—å–≥–∏: {my_money:.2f}\n"
            f"–ü–æ–∑–∏—Ü–∏—è: {posVolume}\n"
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}\n"
            f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {profit:.2f}"
        )
        await self.bot.send_message(chat_id=self.chat_id, text=mess)
        print("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

async def run_strategy(bot: Bot, chat_id: int):
    """–ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è."""
    print("–ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è run_strategy(bot: Bot, chat_id: int)")
    async with aiohttp.ClientSession() as session:
        strategy_tasks = []
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –æ–¥–∏–Ω —Ä–∞–∑
        strategy = Strategy(settings=settings, session=session, bot=bot, chat_id=chat_id)
        command_stop_handler.strategy = strategy  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        my_money = strategy.backtest.my_money
        posVolume = strategy.backtest.posVolume
        mess = (
                f"üí∞–°–≤–æ–±–æ–¥–Ω—ã–µ –¥–µ–Ω—å–≥–∏: {round(my_money, 1)}.\n"
                f"‚öñÔ∏è–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {strategy.backtest.state}.\n"
                f"üí≥–¶–µ–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {strategy.backtest.price_of_pos} ‚ÇΩ.\n"
                f"üõí–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –ü–ê–û \"–ì–∞–∑–ø—Ä–æ–º\": {posVolume}."
            )
        
        await bot.send_message(chat_id="-1003065962569", text=mess)
        await bot.send_message(chat_id=chat_id, text=mess)
        # strategy_tasks.append(asyncio.create_task(strategy.start(model))) # –ü–µ—Ä–µ–¥–∞–µ–º –º–æ–¥–µ–ª—å
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        task = asyncio.create_task(strategy.start())
        print("task = asyncio.create_task(strategy.start()) —Å–¥–µ–ª–∞–Ω–æ")
        strategy_tasks.append(task)
        await bot.send_message(chat_id=chat_id, text=f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è  –∑–∞–ø—É—â–µ–Ω–∞.")

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á (—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è)
        await asyncio.gather(*strategy_tasks, return_exceptions=True)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@router.message(Command(commands=["start"]))#—Å—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã start
async def command_start_handler(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    CHAT_ID = message.chat.id
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. ID —á–∞—Ç–∞: {CHAT_ID}")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id
    # –ù–æ –ª—É—á—à–µ —ç—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

"""@router.message(Command(commands=["run"]))#—Å—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã start
async def command_run_handler(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    global CHAT_ID
    CHAT_ID = message.chat.id
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. ID —á–∞—Ç–∞: {CHAT_ID}")"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id
    # –ù–æ –ª—É—á—à–µ —ç—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

@router.message(Command(commands=["stop"]))
async def command_stop_handler(message: Message, bot: Bot) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    global CHAT_ID
    CHAT_ID = message.chat.id
    await message.answer("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é...")

    # –ù–∞–π–¥—ë–º –∑–∞–ø—É—â–µ–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    # –£–ø—Ä–æ—â—ë–Ω–Ω–æ: –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ run_strategy
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if hasattr(command_stop_handler, 'strategy') and command_stop_handler.strategy:
        await command_stop_handler.strategy.stop()
    else:
        await message.answer("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")

@router.message(Command(commands=["trade"]))
async def command_trade_handler(message: Message, bot: Bot) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    global CHAT_ID
    CHAT_ID = message.chat.id # –û–±–Ω–æ–≤–ª—è–µ–º CHAT_ID –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start –Ω–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
    await message.answer("–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    asyncio.create_task(run_strategy(bot, CHAT_ID))

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
async def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # functions.create_some_folders(timeframes=[Config.timeframe_0])
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())